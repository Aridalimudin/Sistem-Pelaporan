<script>
    // Menunggu dokumen untuk dimuat sepenuhnya
    document.addEventListener('DOMContentLoaded', function() {
        // Dapatkan referensi ke elemen formulir
        const form = document.getElementById('laporanForm');
        
        // Fungsi untuk menghasilkan kode tiket
        function generateTicket() {
            let chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            let ticket = "";
            for (let i = 0; i < 8; i++) {
                ticket += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return ticket;
        }
        
        // Fungsi untuk menampilkan error
        window.showError = function(message) {
            const errorAlert = document.getElementById('errorAlert');
            const errorMessage = document.getElementById('errorMessage');
            
            errorMessage.textContent = message;
            errorAlert.classList.add('show');
            errorAlert.style.display = 'block';
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                closeErrorAlert();
            }, 5000);
        }
        
        // Fungsi untuk menutup error alert
        window.closeErrorAlert = function() {
            const errorAlert = document.getElementById('errorAlert');
            errorAlert.classList.remove('show');
            setTimeout(() => {
                errorAlert.style.display = 'none';
            }, 300);
        }
        
        // Fungsi untuk menangani pengiriman formulir
        form.addEventListener("submit", function(event) {
            event.preventDefault();
            
            // Reset validation sebelumnya
            clearValidation();
            
            // Validasi formulir
            if (validateForm()) {
                // Generate ticket code
                const ticketCode = generateTicket();
                
                // Ambil semua data dari formulir
                const formData = {
                    id_laporan: ticketCode,
                    nis: document.getElementById("nis").value,
                    email: document.getElementById("email").value,
                    uraian: document.getElementById("uraian").value,
                    tanggal_lapor: new Date().toISOString().split('T')[0],
                    status: 'BELUM_VERIFIKASI' // Default status for new reports
                };
                
                // Kirim data ke server dengan fetch API
                saveReportToServer(formData, ticketCode);
                
                // Tampilkan popup dengan kode tiket
                document.getElementById("ticketCode").innerText = ticketCode;
                document.getElementById("popup").style.display = "flex";
            } else {
                // Scroll ke error pertama
                const firstError = document.querySelector('.is-invalid');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    firstError.focus();
                    
                    // Highlight error untuk menarik perhatian
                    const parentElement = firstError.parentElement;
                    parentElement.classList.add('error-highlight');
                    setTimeout(() => {
                        parentElement.classList.remove('error-highlight');
                    }, 2000);
                }
            }
        });

        // Improved function to send data to server
        function saveReportToServer(formData, ticketCode) {
            // Handle file upload if there's a file
            const fileInput = document.getElementById('bukti');
            const token = document.getElementById('token_laravel').value;
            const fileData = new FormData();
            
            if (fileInput.files.length > 0) {
                fileData.append('bukti', fileInput.files[0]);
                fileData.append('id_laporan', ticketCode);
            }
            
            // Gunakan fetch API untuk mengirim data ke endpoint server
            fetch('/api/laporan/store', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': token
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Laporan berhasil disimpan:', data);
                
                // If there's a file to upload, send it in a separate request
                if (fileInput.files.length > 0) {
                    return fetch('/api/laporan/upload-bukti', {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': token
                        },
                        body: fileData
                    });
                }
            })
            .then(response => {
                if (response && !response.ok) {
                    throw new Error('File upload failed');
                }
                if (response) return response.json();
            })
            .then(data => {
                if (data) console.log('Bukti berhasil diupload:', data);
            })
            .catch(error => {
                console.error('Error:', error);
                // Show error message to user
                showError('Terjadi kesalahan saat menyimpan laporan. Silakan coba lagi.');
            });
        }

        // Fungsi untuk menutup popup
        window.closePopup = function() {
            document.getElementById("popup").style.display = "none";
            form.reset();
        };
        
        // Fungsi untuk memvalidasi formulir
        function validateForm() {
            let valid = true;
            
            // Validasi elemen yang diperlukan
            document.querySelectorAll('.required').forEach(input => {
                if (input.value.trim() === '') {
                    markAsInvalid(input, 'Bidang ini wajib diisi');
                    valid = false;
                }
            });
            
            // Validasi format email
            const emailInput = document.getElementById('email');
            if (emailInput.value.trim() !== '') {
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(emailInput.value)) {
                    markAsInvalid(emailInput, 'Format email tidak valid');
                    valid = false;
                }
            }
            
            return valid;
        }
        
        // Fungsi untuk menandai input sebagai tidak valid
        function markAsInvalid(input, message) {
            input.classList.add('is-invalid');
            
            // Cek jika pesan error sudah ada
            const parent = input.parentElement;
            if (!parent.querySelector('.error-text')) {
                const errorText = document.createElement('div');
                errorText.className = 'error-text';
                errorText.textContent = message;
                parent.appendChild(errorText);
            }
        }
        
        // Fungsi untuk menghapus validasi
        function clearValidation() {
            document.querySelectorAll('.is-invalid').forEach(input => {
                input.classList.remove('is-invalid');
            });
            
            document.querySelectorAll('.error-text').forEach(error => {
                error.remove();
            });
            
            document.querySelectorAll('.error-highlight').forEach(highlight => {
                highlight.classList.remove('error-highlight');
            });
        }
        
        // Menambahkan event listener untuk input untuk menghapus validasi saat diketik
        document.querySelectorAll('input, textarea, select').forEach(input => {
            input.addEventListener('input', function() {
                this.classList.remove('is-invalid');
                const parent = this.parentElement;
                const errorText = parent.querySelector('.error-text');
                if (errorText) {
                    errorText.remove();
                }
                parent.classList.remove('error-highlight');
            });
        });
        
        // Menangani klik diluar popup untuk menutupnya
        window.onclick = function(event) {
            const popup = document.getElementById('popup');
            if (event.target === popup) {
                closePopup();
            }
        }
        
        // Deteksi perangkat untuk penyesuaian tampilan responsif
        function checkDevice() {
            const isMobile = window.matchMedia("(max-width: 576px)").matches;
            
            if (isMobile) {
                document.querySelectorAll('textarea').forEach(textarea => {
                    textarea.rows = 3; // Kurangi ukuran textarea pada mobile
                });
            }
        }
        
        // Jalankan pengecekan perangkat saat memuat dan resize
        checkDevice();
        window.addEventListener('resize', checkDevice);
    });
</script>